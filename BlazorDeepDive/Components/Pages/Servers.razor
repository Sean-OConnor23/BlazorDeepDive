@page "/servers"

@rendermode InteractiveServer

@inject NavigationManager nav

<h3>Servers</h3>

<div class="container-fluid text-center">
    <div class="row w-50">
        @foreach (var city in cities)
        {
            <div class="col">
                <div class="card @(selectedCity.Equals(city, StringComparison.OrdinalIgnoreCase)?"border-primary":""))">
                    <img src="@($"/images/{@city}.png")" class="card-img-top" alt="Displays an icon of @city">
                    <div class="card-body">
                        <button type="button" class="btn btn-primary" @onclick="@(() => {SelectCity(city);})">@city</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<div>
    <a class="btn btn-link" href="servers/add" a>Add Server</a>
</div>

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search Servers" @onchange="HandleServerFilterChange"/>
    <button class="btn btn-outline-secondary" type="button" id="button-search" @onclick="HandleSearch">Search</button>
</div>

<div>
    <ul>
        @foreach (var server in servers)
        {
            <li>
                @server.Name in @server.City is <span style="color:@(server.IsOnline ? "green" : "red")">@(server.IsOnline ? "online" : "offline")</span>
                <a href="/servers/@server.Id" class="btn btn-link">Edit</a>
                <EditForm Model="server" FormName="@($"serverDelete{server.Id}")" OnValidSubmit="@(() => {DeleteServer(server.Id);})">
                    <button type="submit" class="btn btn-primary">Delete</button>
                </EditForm>
            </li>
            
        }
    </ul>
</div>


@code {

    private List<Server> servers = ServersRepository.GetServersByCity("Toronto");

    private List<String> cities = CitiesRepository.GetCities();

    private string selectedCity = "Toronto";

    private string serverFilter = "";

    private void DeleteServer(int serverID)
    {
        if(ServersRepository.GetServerById(serverID) != null)
        {
            ServersRepository.DeleteServer(serverID);
            nav.Refresh();
        }
    }

    private void SelectCity(string cityName)
    {
        this.selectedCity = cityName;

        this.servers = ServersRepository.GetServersByCity(cityName);
    }

    private void HandleServerFilterChange(ChangeEventArgs args)
    {
        serverFilter = args.Value?.ToString() ?? string.Empty;
    }

    private void HandleSearch()
    {
        this.servers = ServersRepository.SearchServers(serverFilter);

        this.selectedCity = string.Empty;
    }
}
